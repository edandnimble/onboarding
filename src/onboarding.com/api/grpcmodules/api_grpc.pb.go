// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcmodules

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiRpcClient is the client API for ApiRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiRpcClient interface {
	GuessNumber(ctx context.Context, opts ...grpc.CallOption) (ApiRpc_GuessNumberClient, error)
}

type apiRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewApiRpcClient(cc grpc.ClientConnInterface) ApiRpcClient {
	return &apiRpcClient{cc}
}

func (c *apiRpcClient) GuessNumber(ctx context.Context, opts ...grpc.CallOption) (ApiRpc_GuessNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiRpc_ServiceDesc.Streams[0], "/apiModel.ApiRpc/GuessNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiRpcGuessNumberClient{stream}
	return x, nil
}

type ApiRpc_GuessNumberClient interface {
	Send(*Guess) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type apiRpcGuessNumberClient struct {
	grpc.ClientStream
}

func (x *apiRpcGuessNumberClient) Send(m *Guess) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiRpcGuessNumberClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiRpcServer is the server API for ApiRpc service.
// All implementations must embed UnimplementedApiRpcServer
// for forward compatibility
type ApiRpcServer interface {
	GuessNumber(ApiRpc_GuessNumberServer) error
	mustEmbedUnimplementedApiRpcServer()
}

// UnimplementedApiRpcServer must be embedded to have forward compatible implementations.
type UnimplementedApiRpcServer struct {
}

func (UnimplementedApiRpcServer) GuessNumber(ApiRpc_GuessNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method GuessNumber not implemented")
}
func (UnimplementedApiRpcServer) mustEmbedUnimplementedApiRpcServer() {}

// UnsafeApiRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiRpcServer will
// result in compilation errors.
type UnsafeApiRpcServer interface {
	mustEmbedUnimplementedApiRpcServer()
}

func RegisterApiRpcServer(s grpc.ServiceRegistrar, srv ApiRpcServer) {
	s.RegisterService(&ApiRpc_ServiceDesc, srv)
}

func _ApiRpc_GuessNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiRpcServer).GuessNumber(&apiRpcGuessNumberServer{stream})
}

type ApiRpc_GuessNumberServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Guess, error)
	grpc.ServerStream
}

type apiRpcGuessNumberServer struct {
	grpc.ServerStream
}

func (x *apiRpcGuessNumberServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiRpcGuessNumberServer) Recv() (*Guess, error) {
	m := new(Guess)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiRpc_ServiceDesc is the grpc.ServiceDesc for ApiRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiModel.ApiRpc",
	HandlerType: (*ApiRpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GuessNumber",
			Handler:       _ApiRpc_GuessNumber_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "onboarding.com/api/grpcmodules/api.proto",
}
