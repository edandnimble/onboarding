// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcmodules

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuesserRpcClient is the client API for GuesserRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuesserRpcClient interface {
	// api
	AddGuesser(ctx context.Context, in *Guesser, opts ...grpc.CallOption) (*AddGuesserResponse, error)
	RemoveGuesser(ctx context.Context, in *GuesserId, opts ...grpc.CallOption) (*ResponseStatus, error)
	QueryGuesser(ctx context.Context, in *GuesserId, opts ...grpc.CallOption) (*QueryResponse, error)
}

type guesserRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGuesserRpcClient(cc grpc.ClientConnInterface) GuesserRpcClient {
	return &guesserRpcClient{cc}
}

func (c *guesserRpcClient) AddGuesser(ctx context.Context, in *Guesser, opts ...grpc.CallOption) (*AddGuesserResponse, error) {
	out := new(AddGuesserResponse)
	err := c.cc.Invoke(ctx, "/guesserModel.GuesserRpc/AddGuesser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guesserRpcClient) RemoveGuesser(ctx context.Context, in *GuesserId, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/guesserModel.GuesserRpc/RemoveGuesser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guesserRpcClient) QueryGuesser(ctx context.Context, in *GuesserId, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/guesserModel.GuesserRpc/QueryGuesser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuesserRpcServer is the server API for GuesserRpc service.
// All implementations must embed UnimplementedGuesserRpcServer
// for forward compatibility
type GuesserRpcServer interface {
	// api
	AddGuesser(context.Context, *Guesser) (*AddGuesserResponse, error)
	RemoveGuesser(context.Context, *GuesserId) (*ResponseStatus, error)
	QueryGuesser(context.Context, *GuesserId) (*QueryResponse, error)
	mustEmbedUnimplementedGuesserRpcServer()
}

// UnimplementedGuesserRpcServer must be embedded to have forward compatible implementations.
type UnimplementedGuesserRpcServer struct {
}

func (UnimplementedGuesserRpcServer) AddGuesser(context.Context, *Guesser) (*AddGuesserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGuesser not implemented")
}
func (UnimplementedGuesserRpcServer) RemoveGuesser(context.Context, *GuesserId) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGuesser not implemented")
}
func (UnimplementedGuesserRpcServer) QueryGuesser(context.Context, *GuesserId) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGuesser not implemented")
}
func (UnimplementedGuesserRpcServer) mustEmbedUnimplementedGuesserRpcServer() {}

// UnsafeGuesserRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuesserRpcServer will
// result in compilation errors.
type UnsafeGuesserRpcServer interface {
	mustEmbedUnimplementedGuesserRpcServer()
}

func RegisterGuesserRpcServer(s grpc.ServiceRegistrar, srv GuesserRpcServer) {
	s.RegisterService(&GuesserRpc_ServiceDesc, srv)
}

func _GuesserRpc_AddGuesser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Guesser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuesserRpcServer).AddGuesser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guesserModel.GuesserRpc/AddGuesser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuesserRpcServer).AddGuesser(ctx, req.(*Guesser))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuesserRpc_RemoveGuesser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuesserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuesserRpcServer).RemoveGuesser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guesserModel.GuesserRpc/RemoveGuesser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuesserRpcServer).RemoveGuesser(ctx, req.(*GuesserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuesserRpc_QueryGuesser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuesserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuesserRpcServer).QueryGuesser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guesserModel.GuesserRpc/QueryGuesser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuesserRpcServer).QueryGuesser(ctx, req.(*GuesserId))
	}
	return interceptor(ctx, in, info, handler)
}

// GuesserRpc_ServiceDesc is the grpc.ServiceDesc for GuesserRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuesserRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guesserModel.GuesserRpc",
	HandlerType: (*GuesserRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGuesser",
			Handler:    _GuesserRpc_AddGuesser_Handler,
		},
		{
			MethodName: "RemoveGuesser",
			Handler:    _GuesserRpc_RemoveGuesser_Handler,
		},
		{
			MethodName: "QueryGuesser",
			Handler:    _GuesserRpc_QueryGuesser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onboarding.com/guesser/grpcmodules/guesser.proto",
}
