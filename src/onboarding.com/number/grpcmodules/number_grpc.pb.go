// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcmodules

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumberRpcClient is the client API for NumberRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberRpcClient interface {
	// api
	Add(ctx context.Context, in *Number, opts ...grpc.CallOption) (*ResponseStatus, error)
	Remove(ctx context.Context, in *Number, opts ...grpc.CallOption) (*ResponseStatus, error)
	Query(ctx context.Context, in *Number, opts ...grpc.CallOption) (*QueryResponse, error)
	// guesser
	IsExist(ctx context.Context, opts ...grpc.CallOption) (NumberRpc_IsExistClient, error)
}

type numberRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberRpcClient(cc grpc.ClientConnInterface) NumberRpcClient {
	return &numberRpcClient{cc}
}

func (c *numberRpcClient) Add(ctx context.Context, in *Number, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/numberModel.NumberRpc/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberRpcClient) Remove(ctx context.Context, in *Number, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/numberModel.NumberRpc/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberRpcClient) Query(ctx context.Context, in *Number, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/numberModel.NumberRpc/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberRpcClient) IsExist(ctx context.Context, opts ...grpc.CallOption) (NumberRpc_IsExistClient, error) {
	stream, err := c.cc.NewStream(ctx, &NumberRpc_ServiceDesc.Streams[0], "/numberModel.NumberRpc/IsExist", opts...)
	if err != nil {
		return nil, err
	}
	x := &numberRpcIsExistClient{stream}
	return x, nil
}

type NumberRpc_IsExistClient interface {
	Send(*GuessNumber) error
	Recv() (*NumberExistResponse, error)
	grpc.ClientStream
}

type numberRpcIsExistClient struct {
	grpc.ClientStream
}

func (x *numberRpcIsExistClient) Send(m *GuessNumber) error {
	return x.ClientStream.SendMsg(m)
}

func (x *numberRpcIsExistClient) Recv() (*NumberExistResponse, error) {
	m := new(NumberExistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumberRpcServer is the server API for NumberRpc service.
// All implementations must embed UnimplementedNumberRpcServer
// for forward compatibility
type NumberRpcServer interface {
	// api
	Add(context.Context, *Number) (*ResponseStatus, error)
	Remove(context.Context, *Number) (*ResponseStatus, error)
	Query(context.Context, *Number) (*QueryResponse, error)
	// guesser
	IsExist(NumberRpc_IsExistServer) error
	mustEmbedUnimplementedNumberRpcServer()
}

// UnimplementedNumberRpcServer must be embedded to have forward compatible implementations.
type UnimplementedNumberRpcServer struct {
}

func (UnimplementedNumberRpcServer) Add(context.Context, *Number) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedNumberRpcServer) Remove(context.Context, *Number) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedNumberRpcServer) Query(context.Context, *Number) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedNumberRpcServer) IsExist(NumberRpc_IsExistServer) error {
	return status.Errorf(codes.Unimplemented, "method IsExist not implemented")
}
func (UnimplementedNumberRpcServer) mustEmbedUnimplementedNumberRpcServer() {}

// UnsafeNumberRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberRpcServer will
// result in compilation errors.
type UnsafeNumberRpcServer interface {
	mustEmbedUnimplementedNumberRpcServer()
}

func RegisterNumberRpcServer(s grpc.ServiceRegistrar, srv NumberRpcServer) {
	s.RegisterService(&NumberRpc_ServiceDesc, srv)
}

func _NumberRpc_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberRpcServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/numberModel.NumberRpc/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberRpcServer).Add(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberRpc_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberRpcServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/numberModel.NumberRpc/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberRpcServer).Remove(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberRpc_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberRpcServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/numberModel.NumberRpc/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberRpcServer).Query(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberRpc_IsExist_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NumberRpcServer).IsExist(&numberRpcIsExistServer{stream})
}

type NumberRpc_IsExistServer interface {
	Send(*NumberExistResponse) error
	Recv() (*GuessNumber, error)
	grpc.ServerStream
}

type numberRpcIsExistServer struct {
	grpc.ServerStream
}

func (x *numberRpcIsExistServer) Send(m *NumberExistResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *numberRpcIsExistServer) Recv() (*GuessNumber, error) {
	m := new(GuessNumber)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumberRpc_ServiceDesc is the grpc.ServiceDesc for NumberRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "numberModel.NumberRpc",
	HandlerType: (*NumberRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _NumberRpc_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _NumberRpc_Remove_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _NumberRpc_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IsExist",
			Handler:       _NumberRpc_IsExist_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "onboarding.com/number/grpcmodules/number.proto",
}
